service: crud-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
    authorizers:
      cognitoAuthorizer:
        type: jwt
        name: cognitoAuthorizer
        identitySource: $request.header.Authorization
        issuerUrl: !Sub 'https://cognito-idp.${aws:region}.amazonaws.com/${CognitoUserPool}'
        audience:
          - !GetAtt CognitoUserPoolClient.ClientId
  environment:
    STAGE: ${self:provider.stage}
    AGENTS_TABLE: ${self:custom.agentsTable}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:Query
          Resource: 'arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.agentsTable}'

package:
  individually: true

custom:
  agentsTable: 'agents-${sls:stage}'

plugins:
  - serverless-plugin-typescript
  - serverless-offline

resources:
  Resources:
    AgentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.agentsTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-user-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${sls:stage}-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
        GenerateSecret: false
        
        ReadAttributes:
          - email
        WriteAttributes:
          - email
        SupportedIdentityProviders:
          - COGNITO

functions:
  createAgent:
    handler: src/handlers/create.handler
    events:
      - httpApi:
          path: /agents
          method: post
          authorizer: cognitoAuthorizer

  getAgent:
    handler: src/handlers/get.handler
    events:
      - httpApi:
          path: /agents/{id}
          method: get
          authorizer: cognitoAuthorizer

  listAgents:
    handler: src/handlers/list.handler
    events:
      - httpApi:
          path: /agents
          method: get
          authorizer: cognitoAuthorizer

  updateAgent:
    handler: src/handlers/update.handler
    events:
      - httpApi:
          path: /agents/{id}
          method: put
          authorizer: cognitoAuthorizer

  deleteAgent:
    handler: src/handlers/delete.handler
    events:
      - httpApi:
          path: /agents/{id}
          method: delete
          authorizer: cognitoAuthorizer
